theurl <- 'http://en.wikipedia.org/wiki/Public_opinion_of_same-sex_marriage_in_the_United_States#By_state'
tables <- readHTMLTable(theurl)
n.rows <- unlist(lapply(tables, function(t) dim(t)[1]))
airline = "http://www.theacsi.org/index.php?option=com_content&view=article&id=147&catid=&Itemid=212&i=Airlines"
airline.table = readHTMLTable(airline, header=T, which=1,stringsAsFactors=F)
d = readHTMLTable(theurl, header=T, which=1,stringsAsFactors=F)
d
d = readHTMLTable(theurl, header=T, which=3,stringsAsFactors=F)
d = readHTMLTable(theurl, header=T, which=4,stringsAsFactors=F)
d = readHTMLTable(theurl, header=T, which=5,stringsAsFactors=F)
d
d = readHTMLTable(theurl, header=T, which=6,stringsAsFactors=F)
d = readHTMLTable(theurl, header=T, which=7,stringsAsFactors=F)
d
d = readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
d
table <-  readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
n.rows <- unlist(lapply(table, function(t) dim(t)[1]))
n.rows
n.rows
View(table)
table <- table[order(table$State),]
View(table)
View(table)
table
theurl <- 'http://en.wikipedia.org/wiki/Public_opinion_of_same-sex_marriage_in_the_United_States#By_state'
table <-  readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
table <- table[order(table$State),]
View(table)
table <-  readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
View(table)
d <- table[order(table$State),]
View(d)
table <-  readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
names(table)
n <- names(table)
fix(n)
fix(n)
View(table)
# Read and parse HTML file
theurl <- 'http://en.wikipedia.org/wiki/Public_opinion_of_same-sex_marriage_in_the_United_States#By_state'
table <-  readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
colnames(table) <- c("State", "% support\n(at 95% confidence level)", "support","% opposition",
"% opposition.y", "% no opinion", "% no opinion.y", "Date of poll", "Sample size")
View(table)
getwd
getwd()
setwd("/Users/dphnrome/Documents/Git/SameSexMarriage/")
write.csv(table, "./data/PollingData.csv")
# Read and parse HTML file
doc.html = htmlTreeParse('http://en.wikipedia.org/wiki/List_of_supporters_of_same-sex_marriage_in_the_United_States#Elected_officials',
useInternal = TRUE)
# Extract all the paragraphs (HTML tag is p, starting at
# the root of the document). Unlist flattens the list to
# create a character vector.
doc.text = unlist(xpathApply(doc.html, '//li', xmlValue))
# make a df
d <- as.data.frame(doc.text)
View(d)
write.csv(d, "./data/PoliticianData.csv")
setwd("/Users/dphnrome/Documents/Git/SameSexMarriage/")
pwd
pwd()
getwd()
setwd("C:/Users/dhadley/Documents/GitHub/SameSexMarriage")
library(XML)
library(ggplot2)
library(maps)
library(reshape2)
library(plyr)
# Maping tools
require("rgdal") # requires sp, will use proj.4 if installed
require("maptools")
require("ggplot2")
require("plyr")
require("RColorBrewer")
require("ggmap")
# load data, which was scraped from wikipedia on Nov 16th, 2014
polls <- read.csv("./data/PollingData.csv")
politicians <- read.csv("./data//PoliticianData.csv")
# States data from https://www.census.gov/popest/data/state/asrh/2013/files/SCPRC-EST2013-18+POP-RES.csv
# Population for 18+
states <- read.csv("./data/States.csv")
#### Scrape data from Wikipedia ####
# # Only do this if you want to update everything
# # Otherwise load data above
#
# # List of supporters:
#
# # Read and parse HTML file
# doc.html = htmlTreeParse('http://en.wikipedia.org/wiki/List_of_supporters_of_same-sex_marriage_in_the_United_States#Elected_officials',
#                          useInternal = TRUE)
#
# # Extract all the paragraphs (HTML tag is p, starting at
# # the root of the document). Unlist flattens the list to
# # create a character vector.
# doc.text = unlist(xpathApply(doc.html, '//li', xmlValue))
#
# # make a df
# d <- as.data.frame(doc.text)
#
# write.csv(d, "./data/PoliticianData.csv")
#
#
# # Polling data to compare to politicians:
#
# # Read and parse HTML file
# theurl <- 'http://en.wikipedia.org/wiki/Public_opinion_of_same-sex_marriage_in_the_United_States#By_state'
# table <-  readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
#
# colnames(table) <- c("State", "% support\n(at 95% confidence level)", "support","% opposition",
#                      "% opposition.y", "% no opinion", "% no opinion.y", "Date of poll", "Sample size")
#
# write.csv(table, "./data/PollingData.csv")
#### Clean data ####
states <- states[2:53,]
statesList <- as.character(states$NAME)
# cut out wiki surrounding info
d <- politicians[151:951,]
# make a new column to fill in below
d$State <- NA
# This will fill in the column from above with the home state of each listed politician
for(i in 1:801){
for (j in 1:52){
if((length(grep(statesList[j],d$doc.text[i]))) > 0) d$State[i] = statesList[j]
}
}
d$Tab <- 1
View(d)
d$Current <- NA
d$Current[8:64,] <- "Current"
d$Current[8:64] <- "Current"
d$Current[64:100]
d$[64:100]
d$[64:100,]
d[64:100,]
View(d)
d$Current <- NA
d$Current[c(8:64, 248:435)] <- "Current"
View(d)
View(d)
# Created by Daniel Hadley to analyze the support for gay marriage
# Nov, 2014
setwd("/Users/dphnrome/Documents/Git/SameSexMarriage/")
setwd("C:/Users/dhadley/Documents/GitHub/SameSexMarriage")
library(XML)
library(ggplot2)
library(maps)
library(reshape2)
library(plyr)
# Maping tools
require("rgdal") # requires sp, will use proj.4 if installed
require("maptools")
require("ggplot2")
require("plyr")
require("RColorBrewer")
require("ggmap")
# load data, which was scraped from wikipedia on Nov 16th, 2014
polls <- read.csv("./data/PollingData.csv")
politicians <- read.csv("./data//PoliticianData.csv")
# States data from https://www.census.gov/popest/data/state/asrh/2013/files/SCPRC-EST2013-18+POP-RES.csv
# Population for 18+
states <- read.csv("./data/States.csv")
#### Scrape data from Wikipedia ####
# # Only do this if you want to update everything
# # Otherwise load data above
#
# # List of supporters:
#
# # Read and parse HTML file
# doc.html = htmlTreeParse('http://en.wikipedia.org/wiki/List_of_supporters_of_same-sex_marriage_in_the_United_States#Elected_officials',
#                          useInternal = TRUE)
#
# # Extract all the paragraphs (HTML tag is p, starting at
# # the root of the document). Unlist flattens the list to
# # create a character vector.
# doc.text = unlist(xpathApply(doc.html, '//li', xmlValue))
#
# # make a df
# d <- as.data.frame(doc.text)
#
# write.csv(d, "./data/PoliticianData.csv")
#
#
# # Polling data to compare to politicians:
#
# # Read and parse HTML file
# theurl <- 'http://en.wikipedia.org/wiki/Public_opinion_of_same-sex_marriage_in_the_United_States#By_state'
# table <-  readHTMLTable(theurl, header=T, which=27,stringsAsFactors=F)
#
# colnames(table) <- c("State", "% support\n(at 95% confidence level)", "support","% opposition",
#                      "% opposition.y", "% no opinion", "% no opinion.y", "Date of poll", "Sample size")
#
# write.csv(table, "./data/PollingData.csv")
#### Clean data ####
states <- states[2:53,]
statesList <- as.character(states$NAME)
# cut out wiki surrounding info
d <- politicians[151:951,]
# make a new column to fill in below
d$State <- NA
# This will fill in the column from above with the home state of each listed politician
for(i in 1:801){
for (j in 1:52){
if((length(grep(statesList[j],d$doc.text[i]))) > 0) d$State[i] = statesList[j]
}
}
d$Tab <- 1
# To differentiate between present and past politicans
# I leave out mayors b/c the list is not current - many past mayors on the current list
d$Current <- NA
d$Current[c(8:64, 98:285, 401:418, 476:488, 520:544)] <- "Current"
d <- d[which(d$Current == "Current"),]
# Make this to combine with states
PolsByState <- dcast(d, State ~ Tab, sum)
PolsByState <- merge(states, PolsByState, by.x="NAME", by.y="State", all=T)
PolsByState <- PolsByState[1:52,]
PolsByState <- rename(PolsByState, c("1"="PolsWhoSupport"))
PolsByState$PolsWhoSupport[is.na(PolsByState$PolsWhoSupport)] <- 0
# I now normalize by the population over 18 yrs old
PolsByState$PolsPerCapita <- PolsByState$PolsWhoSupport / PolsByState$POPEST18PLUS2013
PolsByState$PolsPerMillion <- PolsByState$PolsPerCapita * 1000000
#### Map it ####
# http://uchicagoconsulting.wordpress.com/tag/r-ggplot2-maps-visualization/
#load us map data
all_states <- map_data("state")
# Prep for the merge
all_states$State <- gsub("\\b([a-z])([a-z]+)", "\\U\\1\\L\\2" ,all_states$region, perl=TRUE)
all_states <- merge(all_states, PolsByState, by.x="State", by.y="NAME")
# Map
map <- get_map(location = "USA", zoom=4, maptype="roadmap", color = "bw")
ggmap(map)
#plot all states with ggplot
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu")),labels=percent) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Percent of Votes for")
# ggsave(paste("./plots/Map",i,".png",sep=""), dpi=300, width=6, height=5)
PolsByState <- dcast(d, State ~ Tab, sum)
View(d)
PolsByState <- dcast(d, State ~ Tab, sum)
summary(d$Tab)
sum(d$Tab)
PolsByState <- dcast(d, State ~ variable, sum)
PolsByState <- dcast(d, State ~ Tab, sum)
names(d)
class(d)
sapply(d[1,],class)
str(d) #number of observations, number of vars, class of variables
head(d, 20)
library(reshape2)
PolsByState <- dcast(d, State ~ Tab, sum)
PolsByState <- dcast(d, State ~ Tab)
View(PolsByState)
View(PolsByState)
# Make this to combine with states
PolsByState <- dcast(d, State ~ Tab) # , sum) not working for some reason
PolsByState <- merge(states, PolsByState, by.x="NAME", by.y="State", all=T)
PolsByState <- PolsByState[1:52,]
PolsByState <- rename(PolsByState, c("1"="PolsWhoSupport"))
PolsByState$PolsWhoSupport[is.na(PolsByState$PolsWhoSupport)] <- 0
# I now normalize by the population over 18 yrs old
PolsByState$PolsPerCapita <- PolsByState$PolsWhoSupport / PolsByState$POPEST18PLUS2013
PolsByState$PolsPerMillion <- PolsByState$PolsPerCapita * 1000000
#### Map it ####
# http://uchicagoconsulting.wordpress.com/tag/r-ggplot2-maps-visualization/
#load us map data
all_states <- map_data("state")
# Prep for the merge
all_states$State <- gsub("\\b([a-z])([a-z]+)", "\\U\\1\\L\\2" ,all_states$region, perl=TRUE)
all_states <- merge(all_states, PolsByState, by.x="State", by.y="NAME")
# Map
map <- get_map(location = "USA", zoom=4, maptype="roadmap", color = "bw")
ggmap(map)
#plot all states with ggplot
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu")),labels=percent) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Percent of Votes for")
View(all_states)
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7)
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Percent of Votes for")
#plot all states with ggplot
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
ggsave(paste("./plots/Map"), dpi=300, width=6, height=5)
ggsave(paste("./plots/Map.png"), dpi=300, width=6, height=5)
# Map
map <- get_map(location = "USA", zoom=3, maptype="roadmap", color = "bw")
ggmap(map)
#plot all states with ggplot
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
ggsave(paste("./plots/Map.png"), dpi=300, width=6, height=5)
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(6,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
ggsave(paste("./plots/Map.png"), dpi=300, width=6, height=5)
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill=all_states$PolsPerMillion )
p
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill=all_states$PolsPerMillion )
p
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group),colour="white", fill=all_states$PolsPerMillion, colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
p
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
p
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group, fill=all_states$PolsPerMillion), colour=NA, alpha=1) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
p
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group, fill=all_states$PolsPerMillion), colour=NA, alpha=1) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
p
ggsave(paste("./plots/Map2.png"), dpi=300, width=6, height=5)
ggsave(paste("./plots/Map2.png"), dpi=300, width=8, height=5)
p <- ggplot()
p <- p + geom_polygon( data=all_states, aes(x=long, y=lat, group = group, fill=all_states$PolsPerMillion), colour=white, alpha=1) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
p
all_states <- map_data("state")
all_states$State <- gsub("\\b([a-z])([a-z]+)", "\\U\\1\\L\\2" ,all_states$region, perl=TRUE)
all_states$State <- gsub("\\b([a-z])([a-z]+)", "\\U\\1\\L\\2" ,all_states$region, perl=TRUE)
all_statesSeperate <- merge(all_states, PolsByState, by.x="State", by.y="NAME")
all_statesSeperate <- merge(all_states, PolsByState, by.x="State", by.y="NAME")
all_states$PolsPerMillion <- all_statesSeperate$PolsPerMillion
all_states <- map_data("state")
all_states$State <- gsub("\\b([a-z])([a-z]+)", "\\U\\1\\L\\2" ,all_states$region, perl=TRUE)
all_statesSeperate <- merge(all_states, PolsByState, by.x="State", by.y="NAME")
all_statesSeperate <- merge(all_states, PolsByState, by.x="State", by.y="NAME", all=T)
all_statesSeperate <- merge(all_states, PolsByState, by.x="State", by.y="NAME", all.x=T)
all_states <- map_data("state")
# Prep for the merge
all_states$State <- gsub("\\b([a-z])([a-z]+)", "\\U\\1\\L\\2" ,all_states$region, perl=TRUE)
all_states <- merge(all_states, PolsByState, by.x="State", by.y="NAME", all.x=T)
# Map
map <- get_map(location = "USA", zoom=3, maptype="roadmap", color = "bw")
ggmap(map)
#plot all states with ggplot
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
ggsave(paste("./plots/Map.png"), dpi=300, width=6, height=5)
all_states <- map_data("state")
all_states$State <- gsub("\\b([a-z])([a-z]+)", "\\U\\1\\L\\2" ,all_states$region, perl=TRUE)
all_states <- merge(all_states, PolsByState, by.x="State", by.y="NAME", all.x=T)
map <- get_map(location = "USA", zoom=3, maptype="roadmap", color = "bw")
ggmap(map)
ggmap(map) +
geom_polygon(data=all_states, aes(x=long, y=lat, group=group, fill=all_states$PolsPerMillion), colour=NA, alpha=0.7) +
scale_fill_gradientn(colours=(brewer.pal(9,"YlGnBu"))) +
labs(fill="") +
theme_nothing(legend=TRUE) + ggtitle("Politicians Per Million")
ggsave(paste("./plots/Map.png"), dpi=300, width=6, height=5)
